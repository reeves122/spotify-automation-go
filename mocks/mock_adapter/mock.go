// Code generated by MockGen. DO NOT EDIT.
// Source: adapter/adapter.go

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v2 "github.com/zmb3/spotify/v2"
	auth "github.com/zmb3/spotify/v2/auth"
	oauth2 "golang.org/x/oauth2"
)

// MockSpotifyAuthWrapperInterface is a mock of SpotifyAuthWrapperInterface interface.
type MockSpotifyAuthWrapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSpotifyAuthWrapperInterfaceMockRecorder
}

// MockSpotifyAuthWrapperInterfaceMockRecorder is the mock recorder for MockSpotifyAuthWrapperInterface.
type MockSpotifyAuthWrapperInterfaceMockRecorder struct {
	mock *MockSpotifyAuthWrapperInterface
}

// NewMockSpotifyAuthWrapperInterface creates a new mock instance.
func NewMockSpotifyAuthWrapperInterface(ctrl *gomock.Controller) *MockSpotifyAuthWrapperInterface {
	mock := &MockSpotifyAuthWrapperInterface{ctrl: ctrl}
	mock.recorder = &MockSpotifyAuthWrapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotifyAuthWrapperInterface) EXPECT() *MockSpotifyAuthWrapperInterfaceMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockSpotifyAuthWrapperInterface) New(opts ...auth.AuthenticatorOption) *auth.Authenticator {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "New", varargs...)
	ret0, _ := ret[0].(*auth.Authenticator)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockSpotifyAuthWrapperInterfaceMockRecorder) New(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockSpotifyAuthWrapperInterface)(nil).New), opts...)
}

// WithRedirectURL mocks base method.
func (m *MockSpotifyAuthWrapperInterface) WithRedirectURL(url string) auth.AuthenticatorOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRedirectURL", url)
	ret0, _ := ret[0].(auth.AuthenticatorOption)
	return ret0
}

// WithRedirectURL indicates an expected call of WithRedirectURL.
func (mr *MockSpotifyAuthWrapperInterfaceMockRecorder) WithRedirectURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRedirectURL", reflect.TypeOf((*MockSpotifyAuthWrapperInterface)(nil).WithRedirectURL), url)
}

// WithScopes mocks base method.
func (m *MockSpotifyAuthWrapperInterface) WithScopes(scopes ...string) auth.AuthenticatorOption {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithScopes", varargs...)
	ret0, _ := ret[0].(auth.AuthenticatorOption)
	return ret0
}

// WithScopes indicates an expected call of WithScopes.
func (mr *MockSpotifyAuthWrapperInterfaceMockRecorder) WithScopes(scopes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithScopes", reflect.TypeOf((*MockSpotifyAuthWrapperInterface)(nil).WithScopes), scopes...)
}

// MockSpotifyWrapperInterface is a mock of SpotifyWrapperInterface interface.
type MockSpotifyWrapperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSpotifyWrapperInterfaceMockRecorder
}

// MockSpotifyWrapperInterfaceMockRecorder is the mock recorder for MockSpotifyWrapperInterface.
type MockSpotifyWrapperInterfaceMockRecorder struct {
	mock *MockSpotifyWrapperInterface
}

// NewMockSpotifyWrapperInterface creates a new mock instance.
func NewMockSpotifyWrapperInterface(ctrl *gomock.Controller) *MockSpotifyWrapperInterface {
	mock := &MockSpotifyWrapperInterface{ctrl: ctrl}
	mock.recorder = &MockSpotifyWrapperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpotifyWrapperInterface) EXPECT() *MockSpotifyWrapperInterfaceMockRecorder {
	return m.recorder
}

// CreateAuthenticator mocks base method.
func (m *MockSpotifyWrapperInterface) CreateAuthenticator(redirectURL string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateAuthenticator", redirectURL)
}

// CreateAuthenticator indicates an expected call of CreateAuthenticator.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) CreateAuthenticator(redirectURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthenticator", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).CreateAuthenticator), redirectURL)
}

// GetAllPlaylistTracks mocks base method.
func (m *MockSpotifyWrapperInterface) GetAllPlaylistTracks(playlistID v2.ID) ([]v2.PlaylistTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlaylistTracks", playlistID)
	ret0, _ := ret[0].([]v2.PlaylistTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlaylistTracks indicates an expected call of GetAllPlaylistTracks.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) GetAllPlaylistTracks(playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlaylistTracks", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).GetAllPlaylistTracks), playlistID)
}

// GetAllPlaylistsForUser mocks base method.
func (m *MockSpotifyWrapperInterface) GetAllPlaylistsForUser(username string) ([]v2.SimplePlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlaylistsForUser", username)
	ret0, _ := ret[0].([]v2.SimplePlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlaylistsForUser indicates an expected call of GetAllPlaylistsForUser.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) GetAllPlaylistsForUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlaylistsForUser", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).GetAllPlaylistsForUser), username)
}

// GetAuthURL mocks base method.
func (m *MockSpotifyWrapperInterface) GetAuthURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) GetAuthURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).GetAuthURL))
}

// GetToken mocks base method.
func (m *MockSpotifyWrapperInterface) GetToken() (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).GetToken))
}

// GetTokenFromResponseCode mocks base method.
func (m *MockSpotifyWrapperInterface) GetTokenFromResponseCode(responseCode string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFromResponseCode", responseCode)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenFromResponseCode indicates an expected call of GetTokenFromResponseCode.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) GetTokenFromResponseCode(responseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFromResponseCode", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).GetTokenFromResponseCode), responseCode)
}

// LoginAndCreateClient mocks base method.
func (m *MockSpotifyWrapperInterface) LoginAndCreateClient(token *oauth2.Token) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoginAndCreateClient", token)
}

// LoginAndCreateClient indicates an expected call of LoginAndCreateClient.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) LoginAndCreateClient(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAndCreateClient", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).LoginAndCreateClient), token)
}

// RemoveTracksFromPlaylist mocks base method.
func (m *MockSpotifyWrapperInterface) RemoveTracksFromPlaylist(playlistID v2.ID, trackIDs ...v2.ID) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{playlistID}
	for _, a := range trackIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTracksFromPlaylist", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTracksFromPlaylist indicates an expected call of RemoveTracksFromPlaylist.
func (mr *MockSpotifyWrapperInterfaceMockRecorder) RemoveTracksFromPlaylist(playlistID interface{}, trackIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{playlistID}, trackIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTracksFromPlaylist", reflect.TypeOf((*MockSpotifyWrapperInterface)(nil).RemoveTracksFromPlaylist), varargs...)
}
